#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


bool binarySearch(vector<unsigned int> moj_vec, unsigned int number){
  int index = moj_vec.size() / 2;
  int start_index = 0;  
  int end_index = moj_vec.size() - 1;
  while(end_index != start_index){
    if(moj_vec[index] == number)
      return true;
    else if(number < moj_vec[index]){      
      end_index = index - 1;
      index = (start_index + end_index) / 2;     ;
    }
    else{   
      start_index = index + 1;
      index = (start_index + end_index) / 2;
    }   
  }
  if(moj_vec[index] == number)
    return true;
  else
    return false;
}

int main() {
  int n;
  long long int s,p,q;
  cin >> n >> s >> p >> q;
  const unsigned int twos31 = pow(2,31);  
  vector<unsigned int> moj_vec;  
  int counter = 0;
   

 
  moj_vec.push_back(s % twos31); 
  vector<unsigned int>::iterator it = moj_vec.begin();
  for(int i = 0; i < n - 1; i++){  
     cout << counter << endl;
    long long int next_number =((*it) * p + q);
    if(next_number >= twos31){
      unsigned int next__number = next_number % twos31;          
      if(!binarySearch(moj_vec, next__number)){      
	moj_vec.push_back(next__number);
	it = moj_vec.end();
      }
      else
	break;
    }
    else{
      unsigned int next__number = next_number;
      moj_vec.push_back(next__number);
      it = moj_vec.end();
    }
      counter++;
  }
  
  cout << moj_vec.size() << endl;
  
    return 0;
}
